<?xml version="1.0" encoding="utf-8"?>

<!--****************************************************************************
* \file hppass_ac_stt_state-1.0.cypersonality
* \version 1.0
*
* \brief
* HPPASS Autonomous Controller State personality description file.
*
********************************************************************************
* \copyright
* (c) (2024), Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation.
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*****************************************************************************-->

<PersonalityTemplate id="hppass_stt_state" name="State" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v9">
  <PhysicalResource ipblock="mxs40mcpass" version="1">
    <PhysicalResource type="ac">
      <PhysicalResource type="stt">
        <VirtualResourceDefinition type="vstate" display_name="State $idx{0}" display_path="$display_path{1}/$display_name{1}" display_mode="DYNAMIC" count="16" />
      </PhysicalResource>
    </PhysicalResource>
  </PhysicalResource>
  <FittingRules>
    <MappingRules>
      <IpBlock name="mxs40mcpass" />
      <Resource name="pass\.ac\.stt\.vstate"/>
    </MappingRules>
  </FittingRules>
  <ExposedMembers>
    <ExposedMember key="action" paramId="action" />
    <ExposedMember key="condition" paramId="condition" />
    <ExposedMember key="branchState" paramId="branchState" />
    <ExposedMember key="intr" paramId="intr" />
    <ExposedMember key="count" paramId="count" />
    <ExposedMember key="doutUnlock" paramId="doutUnlock" />
    <ExposedMember key="dout" paramId="dout" />
    <ExposedMember key="csgUnlock" paramId="csgUnlock" />
    <ExposedMember key="csgEnable" paramId="csgEnable" />
    <ExposedMember key="csgDacTrig" paramId="csgDacTrig" />
    <ExposedMember key="csgDacTrig$idx" paramId="csgDacTrig$idx" repeatCount="5" />
    <ExposedMember key="sarUnlock" paramId="sarUnlock" />
    <ExposedMember key="sarEnable" paramId="sarEnable" />
    <ExposedMember key="sarGrp" paramId="sarGrp" />
  </ExposedMembers>
  <Parameters>
    <ParamBool id="debug" name="debug" group="debug" default="false" visible="false" editable="false" desc="" />
    <ParamRange id="inst" name="inst" group="Internal" default="`${getInstNumber(&quot;vstate&quot;)}`" min="0" max="15" resolution="1" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="notLast" name="notLast" group="Internal" default="`${inst &lt; 15}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="isZero" name="isZero" group="Internal" default="`${inst eq 0}`" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="next" name="next" group="Internal" default="`${inst + 1}`" min="1" max="16" resolution="1" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="nextRsc" name="nextRsc" group="Internal" default="pass[0].ac[0].stt[0].vstate[`${next}`]" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="acRsc" name="acRsc" group="Internal" default="pass[0].ac[0]" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="acUsed" name="acUsed" group="Internal" default="`${isBlockUsed(acRsc)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="sarRsc" name="sarRsc" group="Internal" default="pass[0].sar[0]" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="sarUsed" name="sarUsed" group="Internal" default="`${isBlockUsed(sarRsc)}`" visible="`${debug}`" editable="false" desc="" />

    <Repeat count="4">
      <ParamString id="sarFifoRsc$idx" name="sarFifoRsc$idx" group="Internal" default="pass[0].sar[0].fifo[0].buffer[$idx]" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <Repeat count="8">
      <ParamString id="sarGrpRsc$idx" name="sarGrpRsc$idx" group="Internal" default="pass[0].sar[0].seq[0].grp[$idx]" visible="`${debug}`" editable="false" desc="" />
      <ParamString id="sarLimitRsc$idx" name="sarLimitRsc$idx" group="Internal" default="pass[0].sar[0].limit[$idx]" visible="`${debug}`" editable="false" desc="" />
      <ParamString id="trigInRsc$idx" name="trigInRsc$idx" group="Internal" default="pass[0].input_trigger[$idx]" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <Repeat count="2">
      <ParamString id="sarFirRsc$idx" name="sarFirRsc$idx" group="Internal" default="pass[0].sar[0].filter[$idx]" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <!-- State Control -->
    <ParamChoice id="action" name="Action" group="State Control" default="CY_HPPASS_ACTION_STOP" visible="true" editable="true" desc="The State Condition">
      <Entry name="Stop"             value="CY_HPPASS_ACTION_STOP"            visible="true" />
      <Entry name="Go to Next State" value="CY_HPPASS_ACTION_NEXT"            visible="`${notLast}`" />
      <Entry name="Wait for True"    value="CY_HPPASS_ACTION_WAIT_FOR"        visible="`${notLast}`" />
      <Entry name="Branch if True"   value="CY_HPPASS_ACTION_BRANCH_IF_TRUE"  visible="true" />
      <Entry name="Branch if False"  value="CY_HPPASS_ACTION_BRANCH_IF_FALSE" visible="true" />
    </ParamChoice>
    <ParamBool id="actionBranch" name="actionBranch" group="State Control" default="`${(action eq CY_HPPASS_ACTION_BRANCH_IF_TRUE) || (action eq CY_HPPASS_ACTION_BRANCH_IF_FALSE)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="cond" name="cond" group="State Control" default="`${(action ne CY_HPPASS_ACTION_STOP) &amp;&amp; (action ne CY_HPPASS_ACTION_NEXT)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamChoice id="condSrc" name="Condition Source" group="State Control" default="INT" visible="`${cond}`" editable="`${cond}`" desc="The State Condition Source">
      <Entry name="Internal"        value="INT" visible="true" />
      <Entry name="External / CPU"  value="EXT" visible="true" />
      <Entry name="SAR ADC"         value="SAR" visible="true" />
      <Entry name="CSG"             value="CSG" visible="true" />
    </ParamChoice>

    <ParamChoice id="condInt" name="Condition" group="State Control" default="CY_HPPASS_CONDITION_BLOCK_READY" visible="`${cond &amp;&amp; (condSrc eq INT)}`" editable="`${cond &amp;&amp; (condSrc eq INT)}`" desc="The State Condition">
      <Entry name="False"       value="CY_HPPASS_CONDITION_FALSE"       visible="`${actionBranch}`" />
      <Entry name="True"        value="CY_HPPASS_CONDITION_TRUE"        visible="`${actionBranch}`" />
      <Entry name="Block Ready" value="CY_HPPASS_CONDITION_BLOCK_READY" visible="true" />
      <Entry name="Count Done"  value="CY_HPPASS_CONDITION_CNT_DONE"    visible="true" />
    </ParamChoice>

    <ParamChoice id="condSar" name="Condition" group="State Control" default="CY_HPPASS_CONDITION_SAR_BUSY" visible="`${cond &amp;&amp; (condSrc eq SAR)}`" editable="`${cond &amp;&amp; (condSrc eq SAR)}`" desc="The State Condition">
      <Entry name="SAR ADC Group $idx Done" value="CY_HPPASS_CONDITION_SAR_GROUP_$idx_DONE" visible="true" repeatCount="8" />

      <Entry name="SAR ADC Limit Detect $idx" value="CY_HPPASS_CONDITION_SAR_LIMIT_$idx" visible="true" repeatCount="8" />

      <Entry name="SAR ADC Busy"                      value="CY_HPPASS_CONDITION_SAR_BUSY"           visible="true" />
      <Entry name="SAR ADC FIR 0 Done"                value="CY_HPPASS_CONDITION_SAR_FIR_0_DONE"      visible="true" />
      <Entry name="SAR ADC FIR 1 Done"                value="CY_HPPASS_CONDITION_SAR_FIR_1_DONE"      visible="true" />
      <Entry name="SAR ADC High Priority Queue Empty" value="CY_HPPASS_CONDITION_SAR_QUEUE_HI_EMPTY" visible="true" />
      <Entry name="SAR ADC Low Priority Queue Empty"  value="CY_HPPASS_CONDITION_SAR_QUEUE_LO_EMPTY" visible="true" />
      <Entry name="SAR ADC Queues Empty"              value="CY_HPPASS_CONDITION_SAR_QUEUES_EMPTY"   visible="true" />

      <Entry name="FIFO $idx Level Detect" value="CY_HPPASS_CONDITION_FIFO_$idx_LEVEL" visible="true" repeatCount="4" />
    </ParamChoice>

    <ParamChoice id="condCsg" name="Condition" group="State Control" default="CY_HPPASS_CONDITION_CSG_0_DAC_DONE" visible="`${cond &amp;&amp; (condSrc eq CSG)}`" editable="`${cond &amp;&amp; (condSrc eq CSG)}`" desc="The State Condition">
      <Entry name="CSG $idx DAC Slope/LUT Done" value="CY_HPPASS_CONDITION_CSG_$idx_DAC_DONE" visible="true" repeatCount="5" />
      <Entry name="CSG $idx Comparator Trip" value="CY_HPPASS_CONDITION_CSG_$idx_COMP" visible="true" repeatCount="5" />
    </ParamChoice>

    <ParamChoice id="condExt" name="Condition" group="State Control" default="CY_HPPASS_CONDITION_TRIG_0" visible="`${cond &amp;&amp; (condSrc eq EXT)}`" editable="`${cond &amp;&amp; (condSrc eq EXT)}`" desc="The State Condition">
      <Entry name="External Trigger In $idx" value="CY_HPPASS_CONDITION_TRIG_$idx" visible="true" repeatCount="8" />
    </ParamChoice>

    <ParamString id="condition" name="condition" group="State Control" default="`${cond ? ((condSrc eq INT) ? condInt : ((condSrc eq SAR) ? condSar : ((condSrc eq CSG) ? condCsg : condExt))) : &quot;CY_HPPASS_CONDITION_FALSE&quot;}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="condBranchTrue" name="condBranchTrue" group="State Control" default="`${((action eq CY_HPPASS_ACTION_BRANCH_IF_TRUE) &amp;&amp; (condition eq CY_HPPASS_CONDITION_TRUE)) || ((action eq CY_HPPASS_ACTION_BRANCH_IF_FALSE) &amp;&amp; (condition eq CY_HPPASS_CONDITION_FALSE))}`" visible="`${debug}`" editable="false" desc="" />
    <ParamChoice id="branchState" name="Branching State" group="State Control" default="`${inst}`" visible="`${actionBranch &amp;&amp; (notLast || condBranchTrue)}`" editable="`${actionBranch &amp;&amp; (notLast || condBranchTrue)}`" desc="The Branching State">
      <Entry name="State $idx"   value="$idx" visible="`${isBlockUsed(&quot;pass[0].ac[0].stt[0].vstate[$idx]&quot;)}`" repeatCount="16"/>
    </ParamChoice>
    <ParamRange id="count" name="Write Counter" group="State Control" default="1" min="1" max="4096" resolution="1"
                visible="`${notLast &amp;&amp; ((action eq CY_HPPASS_ACTION_WAIT_FOR) ||
                                                (action eq CY_HPPASS_ACTION_BRANCH_IF_TRUE) ||
                                                (action eq CY_HPPASS_ACTION_BRANCH_IF_FALSE))}`" editable="true" desc="Write to the loop counter / interval timer" />
    <!-- GPIO, Trigger and Interrupt out -->
    <ParamBool id="doutUnlock" name="Unlock GPIO Out" group="GPIO, Trigger and Interrupt out" default="false" visible="true" editable="true" desc="" />

    <Repeat count="5">
      <ParamChoice id="dout$idx" name="GPIO Out $idx" group="GPIO, Trigger and Interrupt out" default="false" visible="`${doutUnlock}`" editable="`${doutUnlock}`" desc="Output high/low to the GPIO Out $idx">
        <Entry name="High (1)" value="true" visible="true" />
        <Entry name="Low (0)" value="false" visible="true" />
      </ParamChoice>
    </Repeat>

    <ParamRange id="dout" name="dout" group="GPIO, Trigger and Interrupt out"
                default="`${dout0 | (dout1 &lt;&lt; 1) |
                                    (dout2 &lt;&lt; 2) |
                                    (dout3 &lt;&lt; 3) |
                                    (dout4 &lt;&lt; 4)}`" min="0" max="31" resolution="1" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="intr" name="Send Trigger/Interrupt" group="GPIO, Trigger and Interrupt out" default="false" visible="true" editable="true" desc="Send an external trigger or an interrupt to the CPU" />

    <!-- CSG -->
    <Repeat count="5">
      <ParamString id="csgSliceRsc$idx" name="csgSliceRsc$idx" group="Internal" default="pass[0].csg[0].slice[$idx]" visible="`${debug}`" editable="false" desc="" />
      <ParamBool id="csgSlice$idxUsed" name="csgSlice$idxUsed" group="Internal" default="`${isBlockUsed(csgSliceRsc$idx)}`" visible="`${debug}`" editable="false" desc="" />

      <ParamBool id="csgUnlock$idx" name="Unlock" group="CSG $idx" default="`${isZero ? csgSlice$idxUsed : false}`" visible="true" editable="`${!isZero}`" desc="" />
      <ParamBool id="csgEnable$idx" name="Enable" group="CSG $idx" default="`${isZero ? csgSlice$idxUsed : false}`" visible="`${csgUnlock$idx}`" editable="`${isZero ? false : csgUnlock$idx}`" desc="" />
      <ParamBool id="csgDacTrig$idx" name="DAC Trigger" group="CSG $idx" default="false" visible="`${!isZero}`" editable="`${!isZero}`" desc="" />

      <ParamBool id="csgSlice$idxReq" name="csgSlice$idxReq" group="Internal" default="`${((condition eq CY_HPPASS_CONDITION_CSG_$idx_DAC_DONE) || (condition eq CY_HPPASS_CONDITION_CSG_$idx_COMP) || csgUnlock$idx)}`" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <ParamString id="csgUnlock" name="csgUnlock" group="CSG" default="{`${csgUnlock0}`, `${csgUnlock1}`, `${csgUnlock2}`, `${csgUnlock3}`, `${csgUnlock4}`}" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="csgEnable" name="csgEnable" group="CSG" default="{`${csgEnable0}`, `${csgEnable1}`, `${csgEnable2}`, `${csgEnable3}`, `${csgEnable4}`}" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="csgDacTrig" name="csgDacTrig" group="CSG" default="{`${csgDacTrig0}`, `${csgDacTrig1}`, `${csgDacTrig2}`, `${csgDacTrig3}`, `${csgDacTrig4}`}" visible="`${debug}`" editable="false" desc="" />

    <!-- SAR -->
    <ParamBool id="sarUnlock" name="Unlock" group="SAR ADC" default="`${isZero ? sarUsed : false}`" visible="true" editable="`${!isZero}`" desc="" />
    <ParamBool id="sarEnable" name="Enable" group="SAR ADC" default="`${isZero ? sarUsed : false}`" visible="`${sarUnlock}`" editable="`${isZero ? false : sarUnlock}`" desc="" />

    <Repeat count="8">
      <ParamBool id="sarGrp$idx" name="Group $idx Trigger" group="SAR ADC" default="false" visible="`${!isZero}`" editable="`${!isZero}`" desc="" />
    </Repeat>

    <ParamRange id="sarGrp" name="sarGrp" group="SAR ADC"
                default="`${(sarGrp0 ? 1 &lt;&lt; 0 : 0) |
                            (sarGrp1 ? 1 &lt;&lt; 1 : 0) |
                            (sarGrp2 ? 1 &lt;&lt; 2 : 0) |
                            (sarGrp3 ? 1 &lt;&lt; 3 : 0) |
                            (sarGrp4 ? 1 &lt;&lt; 4 : 0) |
                            (sarGrp5 ? 1 &lt;&lt; 5 : 0) |
                            (sarGrp6 ? 1 &lt;&lt; 6 : 0) |
                            (sarGrp7 ? 1 &lt;&lt; 7 : 0)}`" min="0" max="255" resolution="1" visible="`${debug}`" editable="false" desc="" />

    <Repeat count="8">
      <ParamBool id="sarGrp$idxReq" name="sarGrp$idxReq" group="Internal" default="`${((condition eq CY_HPPASS_CONDITION_SAR_GROUP_$idx_DONE) || sarGrp$idx)}`" visible="`${debug}`" editable="false" desc="" />
      <ParamBool id="sarLimit$idxReq" name="sarLimit$idxReq" group="Internal" default="`${((condition eq CY_HPPASS_CONDITION_SAR_LIMIT_$idx) || sarGrp$idx)}`" visible="`${debug}`" editable="false" desc="" />
    </Repeat>
  </Parameters>
  <DRCs>
    <DRC type="ERROR" text="The Autonomous Controller should be enabled and configured" condition="`${!acUsed &amp;&amp; (inst eq 0)}`" >
      <FixIt action="ENABLE_BLOCK" target="`${acRsc}`" value="hppass_ac-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The next state should be enabled and configured" condition="`${notLast &amp;&amp; (action ne CY_HPPASS_ACTION_STOP) &amp;&amp; !condBranchTrue &amp;&amp; !isBlockUsed(nextRsc)}`" >
      <FixIt action="ENABLE_BLOCK" target="`${nextRsc}`" value="" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The CSG slice $idx should be enabled and configured" condition="`${csgSlice$idxReq &amp;&amp; !isBlockUsed(csgSliceRsc$idx)}`" repeatCount="5">
      <FixIt action="ENABLE_BLOCK" target="`${csgSliceRsc$idx}`" value="hppass_csg_slice-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The SAR Sequencer Group $idx should be enabled and configured" condition="`${sarGrp$idxReq &amp;&amp; !isBlockUsed(sarGrpRsc$idx)}`" repeatCount="8">
      <FixIt action="ENABLE_BLOCK" target="`${sarGrpRsc$idx}`" value="hppass_sar_seq_grp-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The SAR Limit $idx should be enabled and configured" condition="`${(condition eq CY_HPPASS_CONDITION_SAR_LIMIT_$idx) &amp;&amp; !isBlockUsed(sarLimitRsc$idx)}`" repeatCount="8">
      <FixIt action="ENABLE_BLOCK" target="`${sarLimitRsc$idx}`" value="hppass_sar_limit-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The SAR Filter $idx should be enabled and configured" condition="`${(condition eq CY_HPPASS_CONDITION_SAR_FIR_$idx_DONE) &amp;&amp; !isBlockUsed(sarFirRsc$idx)}`" repeatCount="2">
      <FixIt action="ENABLE_BLOCK" target="`${sarFirRsc$idx}`" value="hppass_sar_filter-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The FIFO Buffer $idx should be enabled and configured" condition="`${(condition eq CY_HPPASS_CONDITION_FIFO_$idx_LEVEL) &amp;&amp; !isBlockUsed(sarFifoRsc$idx)}`" repeatCount="4" >
      <FixIt action="ENABLE_BLOCK" target="`${sarFifoRsc$idx}`" value="hppass_fifo_buffer-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The Input Trigger $idx should be enabled and configured" condition="`${(condition eq CY_HPPASS_CONDITION_TRIG_$idx) &amp;&amp; !isBlockUsed(trigInRsc$idx)}`" repeatCount="8">
      <FixIt action="ENABLE_BLOCK" target="`${trigInRsc$idx}`" value="hppass_in_trig-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The CSG slice $idx DAC should have AC selected as source for Start or Update Trigger parameters"
         condition="`${(csgDacTrig$idx &amp;&amp; isBlockUsed(csgSliceRsc$idx)) ? ((getExposedMember(csgSliceRsc$idx, &quot;dacTrigStartSel&quot;) ne &quot;CY_HPPASS_DAC_START_AC&quot;) &amp;&amp;
                                                                              (getExposedMember(csgSliceRsc$idx, &quot;dacTrigUpdateSel&quot;) ne &quot;CY_HPPASS_DAC_UPDATE_AC&quot;)): false}`" repeatCount="5">
      <FixIt action="SET_PARAM" target="`${csgSliceRsc$idx . &quot;.dacTrigStartSel&quot;}`" value="CY_HPPASS_DAC_START_AC" valid="`${getExposedMember(csgSliceRsc$idx, &quot;dacHwStart&quot;)}`" />
      <FixIt action="SET_PARAM" target="`${csgSliceRsc$idx . &quot;.dacTrigUpdateSel&quot;}`" value="CY_HPPASS_DAC_UPDATE_AC" valid="true" />
    </DRC>
    <DRC type="ERROR" text="For the last state and Branch Condition the Action should be hardcoded True/False"
         condition="`${(inst == 15) &amp;&amp; cond &amp;&amp; ((condSrc ne INT) ||
                       ((action eq CY_HPPASS_ACTION_BRANCH_IF_TRUE) &amp;&amp; (condition ne CY_HPPASS_CONDITION_TRUE)) ||
                       ((action eq CY_HPPASS_ACTION_BRANCH_IF_FALSE) &amp;&amp; (condition ne CY_HPPASS_CONDITION_FALSE)))}`">
      <FixIt action="SET_PARAM" target="condition" value="CY_HPPASS_CONDITION_TRUE" valid="`${action eq CY_HPPASS_ACTION_BRANCH_IF_TRUE}`" />
      <FixIt action="SET_PARAM" target="condition" value="CY_HPPASS_CONDITION_FALSE" valid="`${action eq CY_HPPASS_ACTION_BRANCH_IF_FALSE}`" />
      <FixIt action="SET_PARAM" target="condSrc" value="INT" valid="`${condSrc ne INT}`" />
    </DRC>
  </DRCs>
</PersonalityTemplate>

