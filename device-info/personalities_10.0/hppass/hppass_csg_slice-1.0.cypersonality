<?xml version="1.0" encoding="utf-8"?>

<!--****************************************************************************
* \file hppass_csg_slice-1.0.cypersonality
* \version 1.0
*
* \brief
* HPPASS CSG Slice personality description file.
*
********************************************************************************
* \copyright
* (c) (2024), Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation.
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*****************************************************************************-->

<PersonalityTemplate id="hppass_csg_slice" name="CSG Slice" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v9">
  <FittingRules>
    <MappingRules>
      <IpBlock name="mxs40mcpass" />
      <Resource name="pass\.csg\.slice"/>
    </MappingRules>
  </FittingRules>
  <ExposedMembers>
    <ExposedMember key="cfgName" paramId="cfgName" />
    <ExposedMember key="instName" paramId="instName" />
    <ExposedMember key="dacTrigStartSel" paramId="dacTrigStartSel" />
    <ExposedMember key="dacTrigUpdateSel" paramId="dacTrigUpdateSel" />
    <ExposedMember key="dacHwStart" paramId="dacHwStart" />
    <ExposedMember key="modeLut" paramId="modeLut" />
  </ExposedMembers>
  <Parameters>
    <ParamBool id="debug" name="debug" group="Internal" default="false" visible="false" editable="false" desc="" />
    <ParamString id="cfgName" name="cfgName" group="Internal" default="`${INST_NAME}`_config" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="inst" name="inst" group="Internal" default="`${getInstNumber(&quot;slice&quot;)}`" min="0" max="4" resolution="1" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="csgRsc" name="csgRsc" group="Internal" default="pass[0].csg[0]" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="csgUsed" name="csgUsed" group="Internal" default="`${isBlockUsed(csgRsc)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="instName" name="instName" group="Internal" default="`${INST_NAME}`" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="csgClkFreq" name="csgClkFreq" group="Internal" default="`${csgUsed ? getExposedMember(csgRsc, &quot;clkFreq&quot;) : 0}`" min="0" max="1000000000" resolution="1" visible="`${debug}`" editable="false" desc="CSG clock frequency" />
    <ParamString id="csgClkAcc" name="csgClkAcc"  group="Internal" default="`${csgUsed ? getExposedMember(csgRsc, &quot;clkAcc&quot;) : 0}`" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="prevDacRsc" name="prevDacRsc" group="Internal" default="pass[0].csg[0].slice[`${inst - 1}`]" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="prevDacEn" name="prevDacEn" group="Internal" default="`${isBlockUsed(prevDacRsc)}`" visible="`${debug}`" editable="false" desc="" />
    <Repeat count="5">
      <ParamString id="slice$idxRsc" name="slice$idxRsc" group="Internal" default="pass[0].csg[0].slice[$idx]" visible="false" editable="false" desc="" />
    </Repeat>

    <!-- Comparator -->
    <ParamChoice id="compPosInput" name="Positive Input" group="Comparator" default="CY_HPPASS_COMP_POS_A" visible="true" editable="true" desc="Select comparator positive pin.">
      <Entry name="AN_A`${inst}`" value="CY_HPPASS_COMP_POS_A" visible="true" />
      <Entry name="AN_B`${inst}`" value="CY_HPPASS_COMP_POS_B" visible="true" />
    </ParamChoice>
    <ParamChoice id="compNegInput" name="Negative Input" group="Comparator" default="CY_HPPASS_COMP_NEG_DAC" visible="true" editable="true" desc="Select comparator negative pin.">
      <Entry name="DAC" value="CY_HPPASS_COMP_NEG_DAC"   visible="true" />
      <Entry name="AN_A`${inst + 1}`"   value="CY_HPPASS_COMP_NEG_A"     visible="`${inst &lt; 4}`" />
      <Entry name="AN_B`${inst + 1}`"   value="CY_HPPASS_COMP_NEG_B"     visible="`${inst &lt; 4}`" />
    </ParamChoice>
    <ParamChoice id="compBlankingMode" name="Blanking Mode" group="Comparator" default="CY_HPPASS_COMP_BLANK_DISABLED" visible="true" editable="true" desc="Comparator Blanking Mode.">
      <Entry name="Disabled"     value="CY_HPPASS_COMP_BLANK_DISABLED" visible="true" />
      <Entry name="Gate on Trigger High"  value="CY_HPPASS_COMP_BLANK_TRIG_HI"  visible="true" />
      <Entry name="Gate on Trigger Low" value="CY_HPPASS_COMP_BLANK_TRIG_LO"  visible="true" />
    </ParamChoice>
    <ParamChoice id="compTrigSelLoc" name="Blanking Trigger" group="Comparator" default="CY_HPPASS_COMP_TRIG_0" visible="`${compBlankingMode ne CY_HPPASS_COMP_BLANK_DISABLED}`" editable="`${compBlankingMode ne CY_HPPASS_COMP_BLANK_DISABLED}`" desc="Select one of the available input triggers which must be generated as LEVEL.">
      <Entry name="Trigger 0" value="CY_HPPASS_COMP_TRIG_0"      visible="true" />
      <Entry name="Trigger 1" value="CY_HPPASS_COMP_TRIG_1"      visible="true" />
      <Entry name="Trigger 2" value="CY_HPPASS_COMP_TRIG_2"      visible="true" />
      <Entry name="Trigger 3" value="CY_HPPASS_COMP_TRIG_3"      visible="true" />
      <Entry name="Trigger 4" value="CY_HPPASS_COMP_TRIG_4"      visible="true" />
      <Entry name="Trigger 5" value="CY_HPPASS_COMP_TRIG_5"      visible="true" />
      <Entry name="Trigger 6" value="CY_HPPASS_COMP_TRIG_6"      visible="true" />
      <Entry name="Trigger 7" value="CY_HPPASS_COMP_TRIG_7"      visible="true" />
    </ParamChoice>
    <ParamString id="compTrigSel" name="compTrigSel" group="Internal" default="`${(compBlankingMode ne CY_HPPASS_COMP_BLANK_DISABLED) ? compTrigSelLoc : &quot;CY_HPPASS_COMP_TRIG_DISABLED&quot;}`" visible="`${debug}`" editable="false" desc="" />
    <ParamChoice id="compEdgeMode" name="Edge Mode" group="Comparator" default="CY_HPPASS_COMP_EDGE_DISABLED" visible="true" editable="true" desc="Comparator output signal mode for Interrupt generation and AC status.">
      <Entry name="Disabled"     value="CY_HPPASS_COMP_EDGE_DISABLED" visible="true" />
      <Entry name="Rising Edge"  value="CY_HPPASS_COMP_EDGE_RISING"   visible="true" />
      <Entry name="Falling Edge" value="CY_HPPASS_COMP_EDGE_FALLING"  visible="true" />
      <Entry name="Both Rising and Falling Edges" value="CY_HPPASS_COMP_EDGE_BOTH"  visible="true" />
    </ParamChoice>
    <ParamBool id="compOutInvert" name="Output Invert" group="Comparator" default="false" visible="true" editable="true" desc="Inversion of comparator output." />

    <!-- DAC -->
    <ParamChoice id="mode" name="Mode" group="DAC" default="CY_HPPASS_DAC_MODE_BUFFERED" visible="true" editable="true" desc="DAC Operation Mode">
      <Entry name="Buffered"  value="CY_HPPASS_DAC_MODE_BUFFERED"  visible="true" />
      <Entry name="Hysteretic"  value="CY_HPPASS_DAC_MODE_HYSTERETIC"  visible="true" />
      <Entry name="Slope Rising"  value="CY_HPPASS_DAC_MODE_SLOPE_RISING"  visible="true" />
      <Entry name="Slope Falling"  value="CY_HPPASS_DAC_MODE_SLOPE_FALLING"  visible="true" />
      <Entry name="Slope Triangular"  value="CY_HPPASS_DAC_MODE_SLOPE_TRIANG"  visible="true" />
      <Entry name="LUT Forward"  value="CY_HPPASS_DAC_MODE_LUT_FORWARD"  visible="true" />
      <Entry name="LUT Reverse"  value="CY_HPPASS_DAC_MODE_LUT_REVERSE"  visible="true" />
      <Entry name="LUT Forward Reverse"  value="CY_HPPASS_DAC_MODE_LUT_FWD_REV"  visible="true" />
    </ParamChoice>
    <ParamBool id="dacCondContMode" name="dacCondContMode" group="Internal" default="`${(mode ne CY_HPPASS_DAC_MODE_BUFFERED) &amp;&amp; (mode ne CY_HPPASS_DAC_MODE_HYSTERETIC)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="dacContMode" name="Continuous" group="DAC" default="false" visible="`${dacCondContMode}`" editable="`${dacCondContMode}`" desc="Operation is Continuous and restarted when end value is reached" />
    <ParamChoice id="dacTrigStartSel" name="Start Trigger" group="DAC" default="CY_HPPASS_DAC_START_DISABLED" visible="true" editable="true" desc="DAC trigger start selection">
      <Entry name="Disabled"   value="CY_HPPASS_DAC_START_DISABLED" visible="true" />
      <Entry name="Trigger 0"  value="CY_HPPASS_DAC_START_TRIG_0"   visible="true" />
      <Entry name="Trigger 1"  value="CY_HPPASS_DAC_START_TRIG_1"   visible="true" />
      <Entry name="Trigger 2"  value="CY_HPPASS_DAC_START_TRIG_2"   visible="true" />
      <Entry name="Trigger 3"  value="CY_HPPASS_DAC_START_TRIG_3"   visible="true" />
      <Entry name="Trigger 4"  value="CY_HPPASS_DAC_START_TRIG_4"   visible="true" />
      <Entry name="Trigger 5"  value="CY_HPPASS_DAC_START_TRIG_5"   visible="true" />
      <Entry name="Trigger 6"  value="CY_HPPASS_DAC_START_TRIG_6"   visible="true" />
      <Entry name="Trigger 7"  value="CY_HPPASS_DAC_START_TRIG_7"   visible="true" />
      <Entry name="Autonomous Controller"  value="CY_HPPASS_DAC_START_AC"  visible="true" />
    </ParamChoice>
    <ParamChoice id="dacTrigUpdateSel" name="Update Trigger" group="DAC" default="CY_HPPASS_DAC_UPDATE_DISABLED" visible="true" editable="true" desc="DAC trigger update selection">
      <Entry name="Disabled"   value="CY_HPPASS_DAC_UPDATE_DISABLED" visible="true" />
      <Entry name="Trigger 0"  value="CY_HPPASS_DAC_UPDATE_TRIG_0"   visible="true" />
      <Entry name="Trigger 1"  value="CY_HPPASS_DAC_UPDATE_TRIG_1"   visible="true" />
      <Entry name="Trigger 2"  value="CY_HPPASS_DAC_UPDATE_TRIG_2"   visible="true" />
      <Entry name="Trigger 3"  value="CY_HPPASS_DAC_UPDATE_TRIG_3"   visible="true" />
      <Entry name="Trigger 4"  value="CY_HPPASS_DAC_UPDATE_TRIG_4"   visible="true" />
      <Entry name="Trigger 5"  value="CY_HPPASS_DAC_UPDATE_TRIG_5"   visible="true" />
      <Entry name="Trigger 6"  value="CY_HPPASS_DAC_UPDATE_TRIG_6"   visible="true" />
      <Entry name="Trigger 7"  value="CY_HPPASS_DAC_UPDATE_TRIG_7"   visible="true" />
      <Entry name="Autonomous Controller"  value="CY_HPPASS_DAC_UPDATE_AC"  visible="true" />
      <Entry name="DAC Divider"  value="CY_HPPASS_DAC_UPDATE_PERIOD_TC"  visible="true" />
      <Entry name="Comparator Output"  value="CY_HPPASS_DAC_UPDATE_COMP_LVL"  visible="true" />
      <Entry name="Inverted Comparator Output"  value="CY_HPPASS_DAC_UPDATE_COMP_LVL_INV"  visible="true" />
    </ParamChoice>
    <ParamBool id="dacSkipTrigEn" name="Skip First Trigger" group="DAC" default="false" visible="`${(dacTrigUpdateSel ne CY_HPPASS_DAC_UPDATE_DISABLED)}`" editable="`${(dacTrigUpdateSel ne CY_HPPASS_DAC_UPDATE_DISABLED)}`" desc="Skip the first DAC hardware update trigger after the DAC is started" />
    <ParamBool id="modeBuff" name="modeBuff" group="Internal" default="`${(mode eq CY_HPPASS_DAC_MODE_BUFFERED)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="modeHyst" name="modeHyst" group="Internal" default="`${(mode eq CY_HPPASS_DAC_MODE_HYSTERETIC)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="modeSlope" name="modeSlope" group="Internal" default="`${(mode eq CY_HPPASS_DAC_MODE_SLOPE_RISING) || (mode eq CY_HPPASS_DAC_MODE_SLOPE_FALLING) || (mode eq CY_HPPASS_DAC_MODE_SLOPE_TRIANG)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="modeLut" name="modeLut" group="Internal" default="`${(mode eq CY_HPPASS_DAC_MODE_LUT_FORWARD) || (mode eq CY_HPPASS_DAC_MODE_LUT_REVERSE) || (mode eq CY_HPPASS_DAC_MODE_LUT_FWD_REV)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="dacCascEn" name="Cascade" group="DAC" default="false" visible="`${dacCondContMode &amp;&amp; (inst &gt; 0)}`" editable="`${dacCondContMode &amp;&amp; (inst &gt; 0)}`" desc="Synchronize parameter update with previous CSG slice in the case of multi-phase operation" />
    <ParamBool id="dacParamSync" name="Parameter Sync" group="DAC" default="false" visible="`${!modeBuff}`" editable="`${!modeBuff}`" desc="Parameter Sync Enable" />
    <ParamChoice id="dacDeglitch" name="DAC Deglitch" group="DAC" default="0" visible="true" editable="true" desc="DAC deglitch configuration">
      <Entry name="Disabled"  value="0"  visible="true" />
      <Entry name="1 Clock Cycle"  value="1"  visible="true" />
      <Entry name="2 Clock Cycles"  value="2"  visible="true" />
      <Entry name="3 Clock Cycles"  value="3"  visible="true" />
      <Entry name="4 Clock Cycles"  value="4"  visible="true" />
      <Entry name="5 Clock Cycles"  value="5"  visible="true" />
      <Entry name="6 Clock Cycles"  value="6"  visible="true" />
      <Entry name="7 Clock Cycles"  value="7"  visible="true" />
    </ParamChoice>

    <ParamBool id="dacPeriodEn" name="dacPeriodEn" group="DAC/Divider" default="`${(dacTrigUpdateSel eq CY_HPPASS_DAC_UPDATE_PERIOD_TC)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="dacFreqMin" name="dacFreqMin" group="DAC/Divider" default="`${csgClkFreq / (4096.0 + 31.0/32.0)}`" min="0" max="1000000000" resolution="1" visible="`${debug}`" editable="false" desc="" />

    <ParamRange id="dacFreqDes" name="Desired Frequency (Hz)" group="DAC/Divider" default="`${csgClkFreq}`" min="`${dacFreqMin}`" max="`${csgClkFreq}`" resolution="1" visible="`${dacPeriodEn &amp;&amp; !modeLut}`" editable="`${dacPeriodEn &amp;&amp; !modeLut}`" desc="DAC update frequency desired value in Hz" />
    <ParamRange id="dacFreqDesLut" name="Desired Frequency (Hz)" group="DAC/Divider" default="`${csgClkFreq / 2}`" min="`${dacFreqMin}`" max="`${csgClkFreq / 2}`" resolution="1" visible="`${dacPeriodEn &amp;&amp; modeLut}`" editable="`${dacPeriodEn &amp;&amp; modeLut}`" desc="DAC update frequency desired value in Hz" />
    <ParamRange id="dacFreqDivComb" name="dacFreqDivComb" group="DAC/Divider" default="`${csgClkFreq != 0 ? (32 * csgClkFreq)/(modeLut ? dacFreqDesLut : dacFreqDes) : 1}`" min="1" max="1000000000" resolution="1" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="dacDivInt" name="Integer Divider" group="DAC/Divider" default="`${dacFreqDivComb / 32}`" min="0" max="`${pow(2, 12)}`" resolution="1" visible="`${dacPeriodEn}`" editable="false" desc="DAC update frequency divider integer value. Complete divider is calculated by the following formula: intDiv + fractDiv/32" />
    <ParamRange id="dacDivFract" name="Fractional Divider" group="DAC/Divider" default="`${dacFreqDivComb % 32}`" min="0" max="`${pow(2, 5) - 1}`" resolution="1" visible="`${dacPeriodEn}`" editable="false" desc="DAC update frequency divider fractional value. Complete divider is calculated by the following formula: intDiv + fractDiv/32" />
    <ParamRange id="dacDiv" name="dacDiv" group="DAC/Divider" default="`${(dacDivInt * 32.0 + dacDivFract) / 32.0}`" min="0" max="`${4097}`" resolution="0.00001" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="dacFreqActStr" name="Achieved Frequency" group="DAC/Divider" default="`${formatFrequency(csgClkFreq / dacDiv, csgClkAcc)}`" visible="`${dacPeriodEn}`" editable="false" desc="DAC update achieved frequency in Hz" />

    <ParamRange id="init" name="Init Value" group="DAC" default="0" min="0" max="`${pow(2, 10) - 1}`" resolution="1" visible="`${(mode eq CY_HPPASS_DAC_MODE_BUFFERED)}`" editable="`${(mode eq CY_HPPASS_DAC_MODE_BUFFERED)}`" desc="DAC initial value" />
    <ParamRange id="hi" name="High" group="DAC/Hysteretic Values" default="0" min="0" max="`${pow(2, 10) - 1}`" resolution="1" visible="`${modeHyst}`" editable="`${modeHyst}`" desc="Hysteretic High Value" />
    <ParamRange id="lo" name="Low" group="DAC/Hysteretic Values" default="0" min="0" max="`${pow(2, 10) - 1}`" resolution="1" visible="`${modeHyst}`" editable="`${modeHyst}`" desc="Hysteretic Low Value" />

    <ParamBool id="slopeFall" name="slopeFall" group="DAC/Slope Values" default="`${mode eq CY_HPPASS_DAC_MODE_SLOPE_FALLING}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="slopeRise" name="slopeRise" group="DAC/Slope Values" default="`${modeSlope &amp;&amp; !slopeFall}`" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="strtRise" name="Start" group="DAC/Slope Values" default="0" min="0" max="1022" resolution="1" visible="`${slopeRise}`" editable="`${slopeRise}`" desc="Start Value" />
    <ParamRange id="stopRise" name="Stop"  group="DAC/Slope Values" default="1" min="1" max="1023" resolution="1" visible="`${slopeRise}`" editable="`${slopeRise}`" desc="Stop Value" />
    <ParamRange id="strtFall" name="Start" group="DAC/Slope Values" default="1" min="1" max="1023" resolution="1" visible="`${slopeFall}`" editable="`${slopeFall}`" desc="Start Value" />
    <ParamRange id="stopFall" name="Stop"  group="DAC/Slope Values" default="0" min="0" max="1022" resolution="1" visible="`${slopeFall}`" editable="`${slopeFall}`" desc="Stop Value" />
    <ParamRange id="stepSlope"  name="Step Size" group="DAC/Slope Values" default="1" min="1" max="64" resolution="1" visible="`${modeSlope}`" editable="`${modeSlope}`" desc="Slope step value" />
    <ParamRange id="slopeDiff" name="slopeDiff" group="DAC/Slope Values" default="`${slopeFall ? (strtFall - stopFall) : (stopRise - strtRise)}`" min="-1023" max="1023" resolution="1" visible="`${debug}`" editable="false" desc="" />

    <ParamBool id="lutRev" name="lutRev" group="DAC/LUT Address" default="`${mode eq CY_HPPASS_DAC_MODE_LUT_REVERSE}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="lutFwd" name="lutFwd" group="DAC/LUT Address" default="`${modeLut &amp;&amp; !lutRev}`" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="strtFwd" name="Start" group="DAC/LUT Address" default="0" min="0" max="126" resolution="1" visible="`${lutFwd}`" editable="`${lutFwd}`" desc="Starting Address of the waveform data in the LUT 128-entry memory" />
    <ParamRange id="stopFwd" name="Stop"  group="DAC/LUT Address" default="1" min="1" max="127" resolution="1" visible="`${lutFwd}`" editable="`${lutFwd}`" desc="Ending Address of the waveform data in the LUT 128-entry memory" />
    <ParamRange id="strtRev" name="Start" group="DAC/LUT Address" default="1" min="1" max="127" resolution="1" visible="`${lutRev}`" editable="`${lutRev}`" desc="Starting Address of the waveform data in the LUT 128-entry memory" />
    <ParamRange id="stopRev" name="Stop"  group="DAC/LUT Address" default="0" min="0" max="126" resolution="1" visible="`${lutRev}`" editable="`${lutRev}`" desc="Ending Address of the waveform data in the LUT 128-entry memory" />
    <ParamRange id="stepLut" name="Step Size" group="DAC/LUT Address" default="1" min="1" max="64" resolution="1" visible="`${modeLut}`" editable="`${modeLut}`" desc="DAC LUT table address step" />
    <ParamRange id="lutDiff" name="lutDiff" group="DAC/LUT Address" default="`${lutRev ? (strtRev - stopRev) : (stopFwd - strtFwd)}`" min="-127" max="127" resolution="1" visible="`${debug}`" editable="false" desc="" />

    <ParamRange id="buffA" name="buffA" group="Internal" default="`${modeBuff ? init : (modeHyst ? hi : (slopeRise ? strtRise : (slopeFall ? strtFall : (lutFwd ? strtFwd : (lutRev ? strtRev : 0)))))}`" min="0" max="`${pow(2, 10) - 1}`" resolution="1" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="buffB" name="buffB" group="Internal" default="`${modeBuff ? 0    : (modeHyst ? lo : (slopeRise ? stopRise : (slopeFall ? stopFall : (lutFwd ? stopFwd : (lutRev ? stopRev : 0)))))}`" min="0" max="`${pow(2, 10) - 1}`" resolution="1" visible="`${debug}`" editable="false" desc="" />

    <Repeat count="16">
      <ParamString id="acStateRsc$idx" name="acStateRsc$idx" group="Internal" default="pass[0].ac[0].stt[0].vstate[$idx]" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <ParamRange id="step" name="step" group="Internal" default="`${modeSlope ? stepSlope : (modeLut ? stepLut : 1)}`" min="1" max="64" resolution="1" visible="`${debug}`" editable="false" desc="" />

    <Repeat count="8">
        <ParamString id="inTrig$idxRsc" name="inTrig$idxRsc" group="Internal" default="`${&quot;pass[0].input_trigger[$idx]&quot;}`" visible="false" editable="false" desc="" />
        <ParamBool id="isInTrig$idxEn" name="isInTrig$idxEn" group="Internal" default="`${isBlockUsed(inTrig$idxRsc)}`" visible="`${debug}`" editable="false" desc="" />
        <ParamString id="inTrig$idxSrc" name="inTrig$idxSrc" group="Internal" default="`${isBlockUsed(inTrig$idxRsc) ? (getExposedMember(inTrig$idxRsc, &quot;sel&quot;)) : false}`" visible="`${debug}`" editable="false" desc="" />
        <ParamBool id="isInTrig$idxFw" name="isInTrig$idxFw" group="Internal" default="`${(inTrig$idxSrc eq &quot;CY_HPPASS_TR_FW_PULSE&quot;) || (inTrig$idxSrc eq &quot;CY_HPPASS_TR_FW_LEVEL&quot;)}`" visible="`${debug}`" editable="false" desc="" />
        <ParamString id="inTrig$idxMode" name="inTrig$idxMode" group="Internal" visible="`${debug}`" editable="false" desc=""
                     default="`${isInTrig$idxEn ? (inTrig$idxSrc eq &quot;CY_HPPASS_TR_FW_LEVEL&quot; ? &quot;lvl&quot; : (inTrig$idxSrc eq &quot;CY_HPPASS_TR_FW_PULSE&quot; ? &quot;pulse&quot; :
                                ((getExposedMember(inTrig$idxRsc, &quot;mode&quot;) eq &quot;CY_HPPASS_LEVEL_DOUBLE_SYNC&quot;) ? &quot;lvl&quot; : &quot;pulse&quot;))) : false}`" />
    </Repeat>
  </Parameters>

  <DRCs>
    <DRC type="ERROR" text="The CSG should be enabled and configured" condition="`${!isBlockUsed(csgRsc)}`" >
      <FixIt action="ENABLE_BLOCK" target="`${csgRsc}`" value="hppass_csg-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="DAC in Slice `${inst}` should be triggered by at least one AC state" condition="`${!((isBlockUsed(acStateRsc0) ? getExposedMember(acStateRsc0,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc1)  ? getExposedMember(acStateRsc1,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc2)  ? getExposedMember(acStateRsc2,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc3)  ? getExposedMember(acStateRsc3,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc4)  ? getExposedMember(acStateRsc4,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc5)  ? getExposedMember(acStateRsc5,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc6)  ? getExposedMember(acStateRsc6,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc7)  ? getExposedMember(acStateRsc7,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc8)  ? getExposedMember(acStateRsc8,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc9)  ? getExposedMember(acStateRsc9,  &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc10) ? getExposedMember(acStateRsc10, &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc11) ? getExposedMember(acStateRsc11, &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc12) ? getExposedMember(acStateRsc12, &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc13) ? getExposedMember(acStateRsc13, &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc14) ? getExposedMember(acStateRsc14, &quot;csgDacTrig&quot; . inst) : false) ||
                                                                                                (isBlockUsed(acStateRsc15) ? getExposedMember(acStateRsc15, &quot;csgDacTrig&quot; . inst) : false)) &amp;&amp;
                                                                                                ((dacTrigStartSel eq CY_HPPASS_DAC_START_AC) ||(dacTrigUpdateSel eq CY_HPPASS_DAC_UPDATE_AC))}`" />
    <DRC type="ERROR" text="Previous DAC should be enabled" condition="`${dacCascEn &amp;&amp; !prevDacEn}`" >
      <FixIt action="ENABLE_BLOCK" target="`${prevDacRsc}`" value="hppass_csg_slice-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="DAC LUT Stop Address should be bigger than Start Address for LUT Forward and LUT Forward Reverse operating modes" condition="`${lutFwd &amp;&amp; (stopFwd &lt;= strtFwd)}`" />
    <DRC type="ERROR" text="DAC LUT Start Address should be bigger than Stop Address for LUT Reverse operating mode" condition="`${lutRev &amp;&amp; (strtRev &lt;= stopRev)}`" />
    <DRC type="ERROR" text="The difference between LUT Start Address and Stop Address should be dividable by the Step Size" condition="`${modeLut &amp;&amp; ((lutDiff % stepLut) &gt; 0)}`" />

    <DRC type="ERROR" text="DAC Slope Stop Value should be bigger than Start Value for Slope Rising and Slope Triangular operating modes" condition="`${(slopeRise) &amp;&amp; (stopRise &lt;= strtRise)}`" />
    <DRC type="ERROR" text="DAC Slope Start Value should be bigger than Stop Value for Slope Falling operating mode" condition="`${slopeFall &amp;&amp; (strtFall &lt;= stopFall)}`" />
    <DRC type="ERROR" text="The difference between Slope Start Value and Stop Value should be dividable by the Step Size" condition="`${modeSlope &amp;&amp; ((slopeDiff % stepSlope) &gt; 0)}`" />

    <DRC type="ERROR" text="The Input Trigger $idx for Comparator Blanking should be enabled and configured" condition="`${(compTrigSel eq CY_HPPASS_COMP_TRIG_$idx) &amp;&amp; !isInTrig$idxEn}`" repeatCount="8" >
      <FixIt action="ENABLE_BLOCK" target="`${inTrig$idxRsc}`" value="hppass_in_trig-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The Input Trigger $idx for Comparator Blanking should be set to Level mode" condition="`${(compTrigSel eq CY_HPPASS_COMP_TRIG_$idx) &amp;&amp; (inTrig$idxMode eq &quot;pulse&quot;)}`" repeatCount="8" >
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.mode&quot;}`" value="CY_HPPASS_LEVEL_DOUBLE_SYNC" valid="`${!isInTrig$idxFw}`" />
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.sel&quot;}`" value="CY_HPPASS_TR_FW_LEVEL" valid="`${isInTrig$idxFw}`" />
    </DRC>
    <DRC type="ERROR" text="Input Trigger $idx for DAC HW Start should be enabled and configured" condition="`${(dacTrigStartSel eq CY_HPPASS_DAC_START_TRIG_$idx) &amp;&amp; !isInTrig$idxEn}`" repeatCount="8" >
      <FixIt action="ENABLE_BLOCK" target="`${inTrig$idxRsc}`" value="hppass_in_trig-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Input Trigger $idx for DAC HW Start should be set to Pulse mode" condition="`${(dacTrigStartSel eq CY_HPPASS_DAC_START_TRIG_$idx) &amp;&amp; (inTrig$idxMode eq &quot;lvl&quot;)}`" repeatCount="8" >
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.sel&quot;}`" value="CY_HPPASS_TR_FW_PULSE" valid="`${isInTrig$idxFw}`" />
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.mode&quot;}`" value="CY_HPPASS_PULSE_ON_POS_DOUBLE_SYNC" valid="`${!isInTrig$idxFw}`" />
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.mode&quot;}`" value="CY_HPPASS_PULSE_ON_NEG_DOUBLE_SYNC" valid="`${!isInTrig$idxFw}`" />
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.mode&quot;}`" value="CY_HPPASS_PULSE_ON_BOTH_DOUBLE_SYNC" valid="`${!isInTrig$idxFw}`" />
    </DRC>
    <DRC type="ERROR" text="The Input Trigger $idx for DAC Update should be enabled and configured" condition="`${(dacTrigUpdateSel eq CY_HPPASS_DAC_UPDATE_TRIG_$idx) &amp;&amp; !isInTrig$idxEn}`" repeatCount="8" >
      <FixIt action="ENABLE_BLOCK" target="`${inTrig$idxRsc}`" value="hppass_in_trig-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The Input Trigger $idx for DAC Update should be set to Pulse mode" condition="`${(dacTrigUpdateSel eq CY_HPPASS_DAC_UPDATE_TRIG_$idx) &amp;&amp; (inTrig$idxMode eq &quot;lvl&quot;)}`" repeatCount="8" >
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.sel&quot;}`" value="CY_HPPASS_TR_FW_PULSE" valid="`${isInTrig$idxFw}`" />
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.mode&quot;}`" value="CY_HPPASS_PULSE_ON_POS_DOUBLE_SYNC" valid="`${!isInTrig$idxFw}`" />
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.mode&quot;}`" value="CY_HPPASS_PULSE_ON_NEG_DOUBLE_SYNC" valid="`${!isInTrig$idxFw}`" />
      <FixIt action="SET_PARAM" target="`${inTrig$idxRsc . &quot;.mode&quot;}`" value="CY_HPPASS_PULSE_ON_BOTH_DOUBLE_SYNC" valid="`${!isInTrig$idxFw}`" />
    </DRC>
    <DRC type="ERROR" text="The de-glitch period should be not grater than the DAC update period" condition="`${(dacTrigUpdateSel eq CY_HPPASS_DAC_UPDATE_PERIOD_TC) &amp;&amp; (dacDeglitch &gt; dacDiv)}`">
      <FixIt action="SET_PARAM" target="dacDeglitch" value="`${floor(dacDiv)}`" valid="true" />
    </DRC>
    <DRC type="WARNING" text="Only one of the Slices 0..2 can be configured in LUT mode" condition="`${(((((isBlockUsed(slice0Rsc)) ? ((getExposedMember(slice0Rsc, &quot;modeLut&quot;)) ? 1: 0) : 0) +
                                                                                                          ((isBlockUsed(slice1Rsc)) ? ((getExposedMember(slice1Rsc, &quot;modeLut&quot;)) ? 1: 0) : 0) +
                                                                                                          ((isBlockUsed(slice2Rsc)) ? ((getExposedMember(slice2Rsc, &quot;modeLut&quot;)) ? 1: 0) : 0)) &gt; 1) &amp;&amp; modeLut) &amp;&amp; (inst &lt; 3)}`" paramId="mode" />
    <DRC type="WARNING" text="Only one of the Slices 3..4 can be configured in LUT mode" condition="`${(((((isBlockUsed(slice3Rsc)) ? ((getExposedMember(slice3Rsc, &quot;modeLut&quot;)) ? 1: 0) : 0) +
                                                                                                          ((isBlockUsed(slice4Rsc)) ? ((getExposedMember(slice4Rsc, &quot;modeLut&quot;)) ? 1: 0) : 0)) &gt; 1) &amp;&amp; modeLut) &amp;&amp; (inst &gt; 2)}`" paramId="mode" />
  </DRCs>

  <ConfigFirmware>
    <ConfigDefine name="`${INST_NAME}`_SLICE_IDX" value="`${inst}`U" public="true" include="true" />
    <ConfigStruct name="`${cfgName}`" type="cy_stc_hppass_slice_t" const="`${csgUsed ? getExposedMember(csgRsc, &quot;inFlash&quot;) : false}`" public="true" include="true">
      <ConfigStruct name="comp" type="nested" const="false" public="true" include="true">
        <Member name="pos" value="`${compPosInput}`" />
        <Member name="neg" value="`${compNegInput}`" />
        <Member name="blank" value="`${compBlankingMode}`" />
        <Member name="trig" value="`${compTrigSel}`" />
        <Member name="edge" value="`${compEdgeMode}`" />
        <Member name="invert" value="`${compOutInvert}`" />
      </ConfigStruct>
      <ConfigStruct name="dac" type="nested" const="false" public="true" include="true">
        <Member name="start" value="`${dacTrigStartSel}`" />
        <Member name="update" value="`${dacTrigUpdateSel}`" />
        <Member name="mode" value="`${mode}`" />
        <Member name="continuous" value="`${dacContMode}`" />
        <Member name="skipTrig" value="`${dacSkipTrigEn}`" />
        <Member name="cascade" value="`${dacCascEn}`" />
        <Member name="paramSync" value="`${dacParamSync}`" />
        <Member name="stepSize" value="`${step}`U" />
        <Member name="deGlitch" value="`${dacDeglitch}`U" />
        <Member name="valBuffA" value="`${buffA}`U" />
        <Member name="valBuffB" value="`${buffB}`U" />
        <ConfigStruct name="period" type="nested" const="false" public="true" include="true">
          <Member name="frac" value="`${dacDivFract}`U" />
          <Member name="intg" value="`${dacDivInt}`U" />
        </ConfigStruct>
      </ConfigStruct>
    </ConfigStruct>
  </ConfigFirmware>
</PersonalityTemplate>
