<?xml version="1.0" encoding="utf-8"?>


<!--****************************************************************************
* \file pll250m.cypersonality
* \version 1.0
*
* \brief
* PLL250M personality description file.It supports only CAT1B PSC3 and CAT1D devices.
*
********************************************************************************
* \copyright
* Copyright 2021-2022 Cypress Semiconductor Corporation
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*****************************************************************************-->

<Personality id="mxs22pll250" name="PLL250" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v7">
  <Dependencies>
    <IpBlock name="mxs22srss,mxs40ssrss" />
    <Resource name="srss\.clock\.pll250m|srss\.clock\.dpll250" />
  </Dependencies>
  <ExposedMembers>
    <ExposedMember key="frequency" paramId="frequencyDisplay" />
    <ExposedMember key="accuracy"  paramId="accuracy" />
    <ExposedMember key="error"     paramId="error" />
  </ExposedMembers>
  <Parameters>
    <!-- PDL documentation -->
    <ParamDoc id="pdlDoc" name="Configuration Help" group="Overview" default="file:///`${cy_libs_path()}`/docs/pdl_api_reference_manual/html/group__group__sysclk__pll.html" linkText="Open PLL Documentation" visible="true" desc="Opens the Peripheral Driver Library Documentation" />

    <!-- PLL source clock and max device frequency -->
    <ParamRange id="clockInst" name="Clock Instance" group="Internal" default="`${&quot;mxs22srss&quot; eq getIpBlockName() ? getInstNumber(&quot;pll250m&quot;) : getInstNumber(&quot;dpll250&quot;) +1}`" min="0" max="`${&quot;mxs22srss&quot; eq getIpBlockName() ? NUM_DPLL_LP -1 : NUM_DPLL250}`" resolution="1" visible="false" editable="false" desc="" />
    <ParamRange id="dpllInst" name="DPLL Instance" group="Internal" default="`${&quot;mxs22srss&quot; eq getIpBlockName() ? getInstNumber(&quot;pll250m&quot;) : getInstNumber(&quot;dpll250&quot;)}`" min="0" max="`${&quot;mxs22srss&quot; eq getIpBlockName() ? NUM_DPLL_LP -1 : NUM_DPLL250 -1}`" resolution="1" visible="false" editable="false" desc="" />
    <ParamString id="sourceClockRsc" name="Source Clock" group="Internal" default="srss[0].clock[0].pathmux[`${clockInst}`]" visible="false" editable="false" desc="" />
    <ParamBool id="srcNotUsed" name="Clock Source Enabled" group="Internal" default="`${!isBlockUsed(sourceClockRsc)}`" visible="false" editable="false" desc="" />
    <ParamBool id="srcError" name="Source Error" group="Internal" default="`${srcNotUsed || getExposedMember(sourceClockRsc, &quot;error&quot;)}`" visible="false" editable="false" desc="" />
    <ParamRange id="sourceFrequencyActual" name="Source Frequency" group="Internal" default="`${srcError ? 0 : getExposedMember(sourceClockRsc, &quot;frequency&quot;)}`" min="0" max="100000000" resolution="1" visible="false" editable="false" desc="" />
    <ParamString id="accuracy" name="accuracy" group="Internal" default="`${!srcError ? getExposedMember(sourceClockRsc, &quot;accuracy&quot;) : 0}`" visible="false" editable="false" desc="" />
    
    <ParamString id="sourceFrequencyInfo" name="Source Frequency" group="General" default="`${formatFrequency(sourceFrequencyActual,accuracy)}`" visible="true" editable="false" desc="Source clock frequency" />
    <!-- For ULP mode, Fpll_max = 50 MHz -->
    <ParamBool id="usingUlp" name="usingUlp" group="Internal" default="`${isBlockUsed(&quot;srss[0].power[0]&quot;) &amp;&amp; getExposedMember(&quot;srss[0].power[0]&quot;, &quot;usingUlp&quot;)}`" visible="false" editable="false" desc="" />
	<ParamBool id="usingLp" name="usingLp" group="Internal" default="`${isBlockUsed(&quot;srss[0].power[0]&quot;) &amp;&amp; getExposedMember(&quot;srss[0].power[0]&quot;, &quot;usingLp&quot;)}`" visible="false" editable="false" desc="" />
	<ParamBool id="usingHp" name="usingHp" group="Internal" default="`${&quot;mxs22srss&quot; eq getIpBlockName() ? isBlockUsed(&quot;srss[0].power[0]&quot;) &amp;&amp; getExposedMember(&quot;srss[0].power[0]&quot;, &quot;usingHp&quot;) : false}`" visible="false" editable="false" desc="" />
    <ParamString id="maxFrequency" name="maxFrequency" group="Internal" default="`${&quot;mxs22srss&quot; eq getIpBlockName() ? 400 : 240}`" visible="false" editable="false" desc="The maximum device frequency" />

    <ParamBool id="lowFrequencyMode" name="Low Frequency Mode" group="General" default="false" visible="true" editable="false" desc="VCO frequency range selection" />
    <ParamChoice id="configuration" name="Configuration" group="General" default="auto" visible="true" editable="true" desc="Choose the automatic or manual PLL tuning">
      <Entry name="Automatic" value="auto"   visible="true"/>
      <Entry name="Manual"    value="manual" visible="true"/>
    </ParamChoice>
    <ParamBool id="manConfig" name="Manual PLL Configuration" group="Internal" default="`${configuration eq manual}`" visible="false" editable="false" desc="" />
    <ParamRange id="desiredFrequency" name="Desired Frequency (MHz)" group="General" default="`${maxFrequency &gt; 100 ? 100 : maxFrequency}`" min="`${&quot;mxs22srss&quot; eq getIpBlockName() ? 10 : 50}`" max="`${maxFrequency}`" resolution="0.001" visible="`${!manConfig}`" editable="true" desc="" />
    <ParamChoice id="optimization" name="Optimization" group="General" default="MinPower" visible="`${!manConfig}`" editable="false" desc="The feedback tuning options">
      <Entry name="Min Power" value="MinPower" visible="true" />
      <Entry name="Min Jitter" value="MinJitter" visible="true" />
    </ParamChoice>
    
    <!-- Set an error if the source clock is not enabled, contains an error or the source frequency is outside the valid range -->
    <ParamBool id="sourceFrequencyOutRange" name="sourceFrequencyOutRange" group="Internal" default="`${(sourceFrequencyActual &lt; 4000000) || (sourceFrequencyActual &gt; 64000000)}`" visible="false" editable="false" desc="" />
    <ParamBool id="error" name="Clock Error" group="Internal" default="`${srcError || sourceFrequencyOutRange}`" visible="false" editable="false" desc="" />

    <!-- Source Frequency -->
    <ParamRange id="sourceFrequency" name="sourceFrequency" group="Internal" default="`${!sourceFrequencyOutRange ? sourceFrequencyActual : 4000000}`" min="4000000" max="64000000" resolution="1" visible="false" editable="false" desc="" />

    <ParamString id="callSolver_imp" name="callSolver_imp" group="Internal" default="`${runTcl(&quot;pll_solver-5.1.tcl&quot;, sourceFrequency / 1000000.0, desiredFrequency, lowFrequencyMode, optimization eq MinPower)}`" visible="false" editable="false" desc="PLL clock solver" />
    <ParamString id="callSolver_simp" name="callSolver_simp" group="Internal" default="`${runTcl(&quot;pll_solver-5.0.tcl&quot;, sourceFrequency / 1000000.0, desiredFrequency, lowFrequencyMode, optimization eq MinPower)}`" visible="false" editable="false" desc="PLL clock solver" /> 
    <ParamString id="callSolver" name="callSolver" group="Internal" default="`${&quot;mxs22srss&quot; eq getIpBlockName() ? callSolver_simp : callSolver_imp}`" visible="false" editable="false" desc="PLL clock solver" /> 
    
    <ParamRange id="feedback" name="Feedback (16-200)" group="General" default="`${getTclVar(&quot;feedbackDiv&quot;, callSolver)}`" min="16" max="200" resolution="1"  visible="true" editable="`${manConfig}`" desc="The feedback clock divider" />
    <ParamRange id="reference" name="Reference (1-16)" group="General" default="`${getTclVar(&quot;referenceDiv&quot;, callSolver)}`" min="1" max="16" resolution="1"  visible="true" editable="`${manConfig}`" desc="The reference clock divider" />
    <ParamRange id="output" name="Output (1-16)" group="General" default="`${getTclVar(&quot;outputDiv&quot;, callSolver)}`" min="1" max="16" resolution="1"  visible="true" editable="`${manConfig}`" desc="The output clock divider" />
    <ParamRange id="frac" name="Fraction divider (0-16777215)" group="General" default="`${getTclVar(&quot;fracDiv&quot;, callSolver)}`" min="0" max="16777215" resolution="1"  visible="true" editable="`${manConfig}`" desc="The fractional clock divider." />
    <ParamBool id="dcoMode" name="DCO Mode Enable" group="General" default="`${getTclVar(&quot;dcoModeBit&quot;, callSolver)}`" visible="true" editable="`${manConfig}`" desc="DCO MODE Bit" />
    <ParamBool id="fracDitherEn" name="Fraction Dither" group="General" default="`${configuration eq manual}`" visible="true" editable="`${configuration eq manual}`" desc="Enables dithering during fractional operation." />
    <ParamBool id="fracEn" name="Fraction Enable" group="General" default="`${!(configuration eq manual)}`" visible="true" editable="`${configuration eq manual}`" desc="Enables fractional division mode." />
    <ParamRange id="frequency" name="Frequency" group="Internal" default="`${(sourceFrequency * ( (feedback &lt;&lt; 24) + frac)  / (reference * output)) &gt;&gt; 24}`" min="`${&quot;mxs22srss&quot; eq getIpBlockName() ? 10000000 : 50000000}`" max="`${&quot;mxs22srss&quot; eq getIpBlockName() ? 400000000 : 240000000}`" resolution="1" visible="false" editable="false" desc="" />
    <ParamRange id="frequencyDisplay" name="Display Frequency" group="Internal" default="`${(sourceFrequencyActual eq 0) ? sourceFrequencyActual : frequency}`" min="0" max="`${&quot;mxs22srss&quot; eq getIpBlockName() ? 400000000 : 240000000}`" resolution="1" visible="false" editable="false" desc="" />
    <ParamString id="frequencyInfo" name="Actual Frequency" group="General" default="`${formatFrequency(!error ? frequency : 0,accuracy)}`" visible="true" editable="false" desc="The calculated resulting PLL output frequency" />

    <!-- Manual DRC verify params -->
    <ParamRange id="pfdFreq" name="PFD Frequency" group="internal" default="`${sourceFrequency / reference / 1000000.0}`" min="0" max="10000" resolution="0.001" visible="false" editable="false" desc="" />

  </Parameters>
  <DRCs>
    <DRC type="ERROR" text="The Source clock for PLL250M `${clockInst}` has a error. Fix the source error." condition="`${srcError}`" />
    <DRC type="ERROR" text="The desired PLL frequency `${desiredFrequency}` MHz is higher than the maximum operating frequency `${maxFrequency}` MHz of the device" condition="`${!usingUlp &amp;&amp; desiredFrequency &gt; maxFrequency}`" paramId="desiredFrequency" />
    <DRC type="ERROR" text="The desired PLL frequency `${desiredFrequency}` MHz exceeds the maximum of 50 MHz when the ULP mode is used" condition="`${usingUlp &amp;&amp; desiredFrequency &gt; 50  &amp;&amp; &quot;mxs22srss&quot; eq getIpBlockName()}`" paramId="desiredFrequency" />
    <DRC type="ERROR" text="The desired PLL frequency `${desiredFrequency}` MHz exceeds the maximum of 60 MHz when the ULP mode is used" condition="`${usingUlp &amp;&amp; desiredFrequency &gt; 60  &amp;&amp; &quot;mxs40ssrss&quot; eq getIpBlockName()}`" paramId="desiredFrequency" />

    <DRC type="ERROR" text="The desired PLL frequency `${desiredFrequency}` MHz is higher than the maximum operating frequency `${maxFrequency}` MHz of the device" condition="`${!usingLp &amp;&amp; desiredFrequency &gt; maxFrequency}`" paramId="desiredFrequency" />
    <DRC type="ERROR" text="The desired PLL frequency `${desiredFrequency}` MHz exceeds the maximum of 160 MHz when the LP mode is used" condition="`${usingLp &amp;&amp; desiredFrequency &gt; 160 &amp;&amp; &quot;mxs22srss&quot; eq getIpBlockName()}`" paramId="desiredFrequency" />
    <DRC type="ERROR" text="The desired PLL frequency `${desiredFrequency}` MHz exceeds the maximum of 200 MHz when the LP mode is used" condition="`${usingLp &amp;&amp; desiredFrequency &gt; 200 &amp;&amp; &quot;mxs40ssrss&quot; eq getIpBlockName()}`" paramId="desiredFrequency" />

    <DRC type="ERROR" text="The desired PLL frequency `${desiredFrequency}` MHz is higher than the maximum operating frequency `${maxFrequency}` MHz of the device" condition="`${!usingHp &amp;&amp; desiredFrequency &gt; maxFrequency}`" paramId="desiredFrequency" />
    <DRC type="ERROR" text="The desired PLL frequency `${desiredFrequency}` MHz exceeds the maximum of 400 MHz when the HP mode is used" condition="`${usingHp &amp;&amp; desiredFrequency &gt; 400}`" paramId="desiredFrequency" />

    <DRC type="ERROR" text="Source clock for PLL is outside the valid range of 4 MHz - 64 MHz" condition="`${!srcError &amp;&amp; sourceFrequencyOutRange}`" paramId="sourceFrequencyInfo"/>
    <!-- Manual mode DRCs -->
    <DRC type="ERROR" text="PFD reference frequency out of range. PFD reference frequency (sourceFrequency / Reference) of `${pfdFreq}` MHz is outside valid range of 4 MHz - 8 MHz" condition="`${manConfig &amp;&amp; (pfdFreq &lt; 4 || pfdFreq &gt; 8)}`" />
    
  </DRCs>
  <ConfigFirmware>
    <ConfigInclude value="cy_sysclk.h" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_ENABLED" value="1" public="false" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_FEEDBACK_DIV" value="`${feedback}`" public="false" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_REFERENCE_DIV" value="`${reference}`" public="false" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_OUTPUT_DIV" value="`${output}`" public="false" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_FRAC_DIV" value="`${frac}`" public="false" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_FRAC_DITHER_EN" value="`${fracDitherEn}`" public="false" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_FRAC_EN" value="`${fracEn}`" public="false" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_LF_MODE" value="`${lowFrequencyMode}`" public="false" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_OUTPUT_MODE" value="CY_SYSCLK_FLLPLL_OUTPUT_AUTO" public="false" include="true" />
    <ConfigDefine name="CY_CFG_SYSCLK_DPLL_LP`${dpllInst}`_OUTPUT_FREQ" value="`${frequency}`" public="false" include="true" />
    <ConfigStruct name="`${INST_NAME . &quot;_lp_pllConfig&quot;}`" type="cy_stc_dpll_lp_config_t" const="false" public="false" include="`${&quot;mxs40ssrss&quot; eq getIpBlockName()}`" guard="defined(CORE_NAME_CM33_0)">
      <Member name="feedbackDiv" value="`${feedback}`" />
      <Member name="referenceDiv" value="`${reference}`" />
      <Member name="outputDiv" value="`${output}`" />
      <Member name="pllDcoMode" value="`${dcoMode}`" />
      <Member name="outputMode" value="CY_SYSCLK_FLLPLL_OUTPUT_AUTO" />
      <Member name="fracDiv" value="`${frac}`" />
      <Member name="fracDitherEn" value="`${fracDitherEn}`" />
      <Member name="fracEn" value="`${fracEn}`" />
      <Member name="sscgDepth" value="0x0U" />
      <Member name="sscgRate" value="0x0U" />
      <Member name="sscgDitherEn" value="0x0U" />
      <Member name="sscgMode" value="0x0U" />
      <Member name="sscgEn" value="0x0U" />
      <Member name="dcoCode" value="0x0U" />
      <Member name="accMode" value="0x1U" />
      <Member name="tdcMode" value="0x1U" />
      <Member name="pllTg" value="0x0U" />
      <Member name="accCntLock" value="0x0U" />
      <Member name="kiInt" value="0x24U" />
      <Member name="kpInt" value="0x1CU" />
      <Member name="kiAccInt" value="0x23U" />
      <Member name="kpAccInt" value="0x1AU" />
      <Member name="kiFrac" value="0x24U" />
      <Member name="kpFrac" value="0x20U" />
      <Member name="kiAccFrac" value="0x23U" />
      <Member name="kpAccFrac" value="0x1AU" />
      <Member name="kiSscg" value="0x18U" />
      <Member name="kpSscg" value="0x18U" />
      <Member name="kiAccSscg" value="0x16U" />
      <Member name="kpAccSscg" value="0x14U" />
    </ConfigStruct>
    <ConfigStruct name="`${INST_NAME . &quot;_lp_pllConfig&quot;}`" type="cy_stc_dpll_lp_config_t" const="false" public="false" include="`${&quot;mxs22srss&quot; eq getIpBlockName()}`" guard="defined(CORE_NAME_CM33_0)">
      <Member name="feedbackDiv" value="`${feedback}`" />
      <Member name="referenceDiv" value="`${reference}`" />
      <Member name="outputDiv" value="`${output}`" />
      <Member name="pllDcoMode" value="`${dcoMode}`" />
      <Member name="outputMode" value="CY_SYSCLK_FLLPLL_OUTPUT_AUTO" />
      <Member name="fracDiv" value="`${frac}`" />
      <Member name="fracDitherEn" value="`${fracDitherEn}`" />
      <Member name="fracEn" value="`${fracEn}`" />
      <Member name="dcoCode" value="0xFU" />
      <Member name="kiInt" value="0xAU" />
      <Member name="kiFrac" value="0xBU" />
      <Member name="kiSscg" value="0x7U" />
      <Member name="kpInt" value="0x8U" />
      <Member name="kpFrac" value="0x9U" />
      <Member name="kpSscg" value="0x7U" />
    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME . &quot;_pllConfig&quot;}`" type="cy_stc_pll_manual_config_t" const="false" public="false" include="true" guard="defined(CORE_NAME_CM33_0)">
      <Member name="lpPllCfg" value="&amp;`${INST_NAME . &quot;_lp_pllConfig&quot;}`" />
    </ConfigStruct>

<ConfigFunction signature="__STATIC_INLINE void Cy_SysClk_Dpll_Lp`${dpllInst}`_Init(void)" body="    uint32_t clkHfMask = 0;&#xA;&#xA;    #if !defined (CY_PDL_TZ_ENABLED)&#xA;    if (Cy_SysClk_PllIsEnabled(SRSS_DPLL_LP_`${dpllInst}`_PATH_NUM))&#xA;        return;&#xA;&#xA;    #endif&#xA;    Cy_SysClk_PllDisable(SRSS_DPLL_LP_`${dpllInst}`_PATH_NUM);&#xA;&#xA;    if (CY_SYSCLK_SUCCESS != Cy_SysClk_PllManualConfigure(SRSS_DPLL_LP_`${dpllInst}`_PATH_NUM, &amp;`${INST_NAME}`_pllConfig))&#xA;    {&#xA;        cycfg_ClockStartupError(CY_CFG_SYSCLK_PLL_ERROR);&#xA;    }&#xA;    clkHfMask = Cy_SysClk_ClkHfGetMaskOnPath((cy_en_clkhf_in_sources_t)SRSS_DPLL_LP_`${dpllInst}`_PATH_NUM);&#xA;    if(clkHfMask)&#xA;    {&#xA;        Cy_SysClk_ClkHfEnableDirectMuxWithMask(clkHfMask, true);&#xA;    }&#xA;    if (CY_SYSCLK_SUCCESS != Cy_SysClk_PllEnable(SRSS_DPLL_LP_`${dpllInst}`_PATH_NUM, 10000u))&#xA;    {&#xA;        cycfg_ClockStartupError(CY_CFG_SYSCLK_PLL_ERROR);&#xA;    }&#xA;    else&#xA;    {&#xA;        Cy_SysLib_DelayUs(SRSS_DPLL_LP_INIT_DELAY_USEC);&#xA;        Cy_SysClk_ClkHfEnableDirectMuxWithMask(clkHfMask, false);&#xA;    }&#xA;" public="false" include="`${(&quot;mxs22srss&quot; eq getIpBlockName())}`" guard="defined(CORE_NAME_CM33_0)" />
<ConfigFunction signature="__STATIC_INLINE void Cy_SysClk_Dpll_Lp`${dpllInst}`_Init(void)" body="    Cy_SysClk_PllDisable(SRSS_PLL_250M_`${dpllInst}`_PATH_NUM);&#xA;&#xA;    if (CY_SYSCLK_SUCCESS != Cy_SysClk_PllManualConfigure(SRSS_PLL_250M_`${dpllInst}`_PATH_NUM, &amp;`${INST_NAME}`_pllConfig))&#xA;    {&#xA;        cycfg_ClockStartupError(CY_CFG_SYSCLK_PLL_ERROR);&#xA;    }&#xA;    if (CY_SYSCLK_SUCCESS != Cy_SysClk_PllEnable(SRSS_PLL_250M_`${dpllInst}`_PATH_NUM, 10000u))&#xA;    {&#xA;        cycfg_ClockStartupError(CY_CFG_SYSCLK_PLL_ERROR);&#xA;    }" public="false" include="`${(&quot;mxs40ssrss&quot; eq getIpBlockName())}`" />
  </ConfigFirmware>
</Personality>
