<?xml version="1.0" encoding="utf-8"?>

<!--****************************************************************************
* \file hppass-1.0.cypersonality
* \version 1.0
*
* \brief
* HPPASS personality description file.
*
********************************************************************************
* \copyright
* (c) (2024), Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation.
*
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*****************************************************************************-->

<PersonalityTemplate id="hppass" name="HPPASS" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v9">
  <FittingRules>
    <MappingRules>
      <IpBlock name="mxs40mcpass" />
      <Resource name="pass"/>
    </MappingRules>
  </FittingRules>
  <ExposedMembers>
    <ExposedMember key="init" paramId="init" />
    <ExposedMember key="instName" paramId="instName" />
    <!-- <ExposedMember key="start" paramId="start" /> -->
  </ExposedMembers>
  <Parameters>
    <ParamDoc id="pdlDoc" name="Configuration Help" group="Overview" default="file:///`${cy_libs_path()}`/docs/pdl_api_reference_manual/html/group__group__hppass.html" linkText="Open HPPASS Documentation" visible="true" desc="Opens the Peripheral Driver Library Documentation" />
    <ParamBool id="debug" name="debug" group="Internal" default="false" visible="false" editable="false" desc="" />
    <ParamString id="instName" name="instName" group="Internal" default="`${INST_NAME}`" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="clkRsc" name="HPPASS Clock" group="Internal" default="srss[0].clock[0].hfclk[3]" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="clkUsed" name="clkUsed" group="Internal" default="`${(clkRsc ne &quot;&quot;) ? isBlockUsed(clkRsc) : false}`" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="clkError" name="clkError" group="Internal" default="`${clkUsed ? getExposedMember(clkRsc, &quot;error&quot;) : true}`" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="clkFreq" name="clkFreq" group="Internal" default="`${!clkError ? getExposedMember(clkRsc, &quot;frequency&quot;) : 0}`" min="0" max="1000000000" resolution="1" visible="`${debug}`" editable="false" desc="" />

    <ParamString id="powerRsc" name="powerRsc" group="Internal" default="srss[0].power[0]" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="powerUsed" name="powerUsed" group="Internal" default="`${isBlockUsed(powerRsc)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamRange id="vddaMv" name="vddaMv" group="Internal" default="`${powerUsed ? getExposedMember(powerRsc, &quot;vddaMv&quot;) : 3300}`" min="1700" max="3600" resolution="1" visible="`${debug}`" editable="false" desc="" />
    <ParamBool id="lowSupply" name="Low Supply Mode" group="Internal" default="`${vddaMv &lt; 2700}`" visible="false" editable="false" desc="True when VDDA supply is less than 2.7 V." />
    <ParamRange id="maxFreq" name="maxFreq" group="Internal" default="`${!lowSupply ? 240 : 120}`" min="0" max="1000000000" resolution="1" visible="`${debug}`" editable="false" desc="" />

    <ParamBool id="init" name="Initialize During Startup" group="Advanced" default="true" visible="true" editable="true" desc="Performs an automatic HPPASS initialization within the init_cycfg_peripherals() generated function." />
    <ParamBool id="start" name="Start" group="Startup" default="false" visible="false" editable="false" desc="Performs an automatic HPPASS startup sequence within the init_cycfg_peripherals() generated function." />
    <ParamBool id="inFlash" name="Store Config in Flash" group="Advanced" default="true" visible="true" editable="true" desc="Controls whether the configuration structure is stored in flash (const, true) or SRAM (not const, false)." />

    <Repeat count="8">
      <ParamString id="trigInRsc$idx" name="trigInRsc$idx" group="Internal" default="pass[0].input_trigger[$idx]" visible="`${debug}`" editable="false" desc="" />
      <ParamString id="trigPulseRsc$idx" name="trigPulseRsc$idx" group="Internal" default="pass[0].output_pulse_trigger[$idx]" visible="`${debug}`" editable="false" desc="" />
      <ParamString id="trigLvlRsc$idx" name="trigLvlRsc$idx" group="Internal" default="pass[0].output_level_trigger[$idx]" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <ParamString id="csgRsc" name="csgRsc" group="Internal" default="pass[0].csg[0]" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="sarRsc" name="sarRsc" group="Internal" default="pass[0].sar[0]" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="acRsc" name="acRsc" group="Internal" default="pass[0].ac[0]" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="acSttRsc" name="acSttRsc" group="Internal" default="pass[0].ac[0].stt[0]" visible="`${debug}`" editable="false" desc="" />

    <ParamString id="csgUsed" name="csgUsed" group="Internal" default="`${isBlockUsed(csgRsc)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="sarUsed" name="sarUsed" group="Internal" default="`${isBlockUsed(sarRsc)}`" visible="`${debug}`" editable="false" desc="" />
    <ParamString id="acUsed"  name="acUsed"  group="Internal" default="`${isBlockUsed(acRsc)}`"  visible="`${debug}`" editable="false" desc="" />
    <ParamString id="acSttUsed" name="acSttUsed" group="Internal" default="`${isBlockUsed(acSttRsc)}`" visible="`${debug}`" editable="false" desc="" />

    <Repeat count="5">
      <ParamString id="sliceRsc$idx" name="sliceRsc$idx" group="Internal" default="pass[0].csg[0].slice[$idx]" visible="`${debug}`" editable="false" desc="" />
      <ParamBool id="sliceUsed$idx" name="sliceUsed$idx" group="Internal" default="`${isBlockUsed(sliceRsc$idx)}`" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <Repeat count="12">
      <ParamString id="dirSampRsc$idx" name="dirSampRsc$idx" group="Internal" default="pass[0].sar[0].dir_sampler[$idx]" visible="`${debug}`" editable="false" desc="" />
      <ParamBool id="dirSampUsed$idx" name="dirSampUsed$idx" group="Internal" default="`${isBlockUsed(dirSampRsc$idx)}`" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <ParamRange id="dirSampNum" name="dirSampNum" group="Internal" default="`${(dirSampUsed0 ? 1 : 0) +
                                                                               (dirSampUsed1 ? 1 : 0) +
                                                                               (dirSampUsed2 ? 1 : 0) +
                                                                               (dirSampUsed3 ? 1 : 0) +
                                                                               (dirSampUsed4 ? 1 : 0) +
                                                                               (dirSampUsed5 ? 1 : 0) +
                                                                               (dirSampUsed6 ? 1 : 0) +
                                                                               (dirSampUsed7 ? 1 : 0) +
                                                                               (dirSampUsed8 ? 1 : 0) +
                                                                               (dirSampUsed9 ? 1 : 0) +
                                                                               (dirSampUsed10 ? 1 : 0) +
                                                                               (dirSampUsed11 ? 1 : 0)}`" min="0" max="12" resolution="1" visible="`${debug}`" editable="false" desc="" />
    <Repeat count="4">
      <ParamString id="muxSampRsc$idx" name="muxSampRsc$idx" group="Internal" default="pass[0].sar[0].muxed_sampler[$idx]" visible="`${debug}`" editable="false" desc="" />
      <ParamBool id="muxSampUsed$idx" name="muxSampUsed$idx" group="Internal" default="`${isBlockUsed(muxSampRsc$idx)}`" visible="`${debug}`" editable="false" desc="" />
    </Repeat>

    <ParamRange id="muxSampNum" name="muxSampNum" group="Internal" default="`${(muxSampUsed0 ? 1 : 0) +
                                                                               (muxSampUsed1 ? 1 : 0) +
                                                                               (muxSampUsed2 ? 1 : 0) +
                                                                               (muxSampUsed3 ? 1 : 0)}`" min="0" max="4" resolution="1" visible="`${debug}`" editable="false" desc="" />
    <Repeat count="4">
      <ParamString id="bufRsc$idx" name="bufRsc$idx" group="Internal" default="pass[0].sar[0].fifo[0].buffer[$idx]" visible="false" editable="false" desc="" />
      <ParamBool id="bufUsed$idx" name="bufUsed$idx" group="Internal" default="`${isBlockUsed(bufRsc$idx)}`" visible="false" editable="false" desc="" />
    </Repeat>
  </Parameters>

  <DRCs>
    <DRC type="ERROR" text="Autonomous Controller should be enabled and configured" condition="`${!isBlockUsed(acRsc)}`" >
      <FixIt action="ENABLE_BLOCK" target="`${acRsc}`" value="hppass_ac-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Either CSG or SAR should be enabled and configured" condition="`${(!isBlockUsed(csgRsc)) &amp;&amp; (!isBlockUsed(sarRsc))}`" >
      <FixIt action="ENABLE_BLOCK" target="`${csgRsc}`" value="hppass_csg-1.0" valid="true" />
      <FixIt action="ENABLE_BLOCK" target="`${sarRsc}`" value="hppass_sar-1.0" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Prior to starting the block should be initialized" condition="`${start &amp;&amp; !init}`" >
      <FixIt action="SET_PARAM" target="init" value="true" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The CLK_HF3 should be enabled and configured" condition="`${!clkUsed}`" >
      <FixIt action="ENABLE_BLOCK" target="`${clkRsc}`" value="" valid="true" />
    </DRC>
    <DRC type="ERROR" text="The CLK_HF3 frequency should be in the range is 60...`${maxFreq}`MHz" condition="`${!clkError &amp;&amp; ((clkFreq &lt; 60000000) || (clkFreq &gt; (maxFreq * 1000000)))}`"/>
  </DRCs>
  <ConfigFirmware>
    <ConfigInclude value="cy_hppass.h" include="true" />
    <ConfigInclude value="cy_sysint.h" include="true" />
    <ConfigInclude value="cyhal.h" include="true" guard="defined (CY_USING_HAL)" />
    <ConfigInclude value="mtb_hal.h" include="true" guard="defined (COMPONENT_MTB_HAL)" />
    <ConfigInclude value="mtb_hal_hw_types.h" include="true" guard="defined (COMPONENT_MTB_HAL)" />
    <ConfigInclude value="cyhal_hw_types.h" include="true" guard="defined (CY_USING_HAL_LITE)" />

    <ConfigStruct name="`${INST_NAME}`_config" type="cy_stc_hppass_cfg_t" const="`${inFlash}`" public="true" include="true">
      <ConfigStruct name="ac" type="nested" const="false" public="true"  include="true">
        <Member name="sttEntriesNum" value="`${getExposedMember(acSttRsc, &quot;stateCnt&quot;)}`U" />
        <Member name="stt" value="`${getExposedMember(acSttRsc, &quot;cfgName&quot;)}`" />
        <Member name="gpioOutEnMsk" value="`${acUsed ? getExposedMember(acRsc, &quot;doutMsk&quot;) : 0}`U" />
        <Member name="startupClkDiv" value="`${acUsed ? getExposedMember(acRsc, &quot;stClkDiv&quot;) : 0}`U" />
        <ConfigArray name="startup" type="nested" const="false" public="true"  include="true" >
          <ConfigStruct name="empty" type="nested" const="false" public="true"  include="true" repeatCount="4">
            <Member name="count"    value="`${acUsed ? getExposedMember(acRsc, &quot;step&quot; . $idx{1} . &quot;Counts&quot;) : 0}`U" />
            <Member name="sar"      value="`${acUsed ? getExposedMember(acRsc, &quot;step&quot; . $idx{1} . &quot;AdcEn&quot;) : false}`" />
            <Member name="csgChan"  value="`${acUsed ? getExposedMember(acRsc, &quot;step&quot; . $idx{1} . &quot;CsgChEn&quot;) : false}`" />
            <Member name="csgSlice" value="`${acUsed ? getExposedMember(acRsc, &quot;step&quot; . $idx{1} . &quot;PowSliceEn&quot;) : false}`" />
            <Member name="csgReady" value="`${acUsed ? getExposedMember(acRsc, &quot;step&quot; . $idx{1} . &quot;CsgReadyEn&quot;) : false}`" />
          </ConfigStruct>
        </ConfigArray>
      </ConfigStruct>

      <Member name="csg" value="`${csgUsed ? &quot;&amp;&quot; . getExposedMember(csgRsc, &quot;cfgName&quot;) : &quot;NULL&quot;}`" />
      <Member name="sar" value="`${sarUsed ? &quot;&amp;&quot; . getExposedMember(sarRsc, &quot;cfgName&quot;) : &quot;NULL&quot;}`" />

      <ConfigArray name="trigIn" type="nested" const="false" public="true"  include="true" >
        <ConfigStruct name="empty" type="nested" const="false" public="true"  include="true" repeatCount="8">
          <Member name="type" value="`${isBlockUsed(trigInRsc$idx{1}) ? getExposedMember(trigInRsc$idx{1}, &quot;sel&quot;) : &quot;CY_HPPASS_TR_DISABLED&quot;}`" />
          <Member name="hwMode" value="`${isBlockUsed(trigInRsc$idx{1}) ? getExposedMember(trigInRsc$idx{1}, &quot;mod&quot;) : &quot;CY_HPPASS_PULSE_ON_POS_DOUBLE_SYNC&quot;}`" />
        </ConfigStruct>
      </ConfigArray>

      <ConfigArray name="trigPulse" type="nested" const="false" public="true"  include="true" >
        <ArrayElement  value="`${isBlockUsed(trigPulseRsc$idx{0}) ? getExposedMember(trigPulseRsc$idx{0}, &quot;srcSel&quot;) : &quot;CY_HPPASS_DISABLED&quot;}`" count="8" />
      </ConfigArray>

      <ConfigArray name="trigLevel" type="nested" const="false" public="true"  include="true" >
        <ConfigStruct name="empty" type="nested" const="false" public="true"  include="true" repeatCount="8">
          <Member name="syncBypass" value="`${isBlockUsed(trigLvlRsc$idx{1}) ? getExposedMember(trigLvlRsc$idx{1}, &quot;sync&quot;) : true}`" />
          <Member name="compMsk" value="`${isBlockUsed(trigLvlRsc$idx{1}) ? getExposedMember(trigLvlRsc$idx{1}, &quot;compEn&quot;) : 0}`U" />
          <Member name="limitMsk" value="`${isBlockUsed(trigLvlRsc$idx{1}) ? getExposedMember(trigLvlRsc$idx{1}, &quot;limitEn&quot;) : 0U}`U" />
        </ConfigStruct>
      </ConfigArray>
    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME}`_adc_hal_obj" type="cyhal_resource_inst_t" const="true" public="true" include="`${sarUsed}`" guard="defined (CY_USING_HAL) || defined(CY_USING_HAL_LITE)">
      <Member name="type" value="CYHAL_RSC_ADC" />
      <Member name="block_num" value="0U" />
      <Member name="channel_num" value="0U" />
    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME}`_adc_hal_config" type="cyhal_adc_configurator_t" const="`${inFlash}`" public="true" include="`${sarUsed}`" guard="defined (CY_USING_HAL) || defined(CY_USING_HAL_LITE)">
      <Member name="resource" value="&amp;`${INST_NAME}`_adc_hal_obj" />
      <Member name="hppass_config" value="&amp;`${INST_NAME}`_config" />
      <Member name="clock" value="NULL" />
      <Member name="num_channels" value="`${dirSampNum + muxSampNum}`U" />
      <Member name="achieved_acquisition_time" value="NULL" />
    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME}`_adc_hal_config" type="mtb_hal_adc_configurator_t" const="`${inFlash}`" public="true" include="`${sarUsed}`" guard="defined (COMPONENT_MTB_HAL) &amp;&amp; (MTB_HAL_DRIVER_AVAILABLE_ADC)">
      <Member name="base" value="HPPASS" />
      <Member name="hppass_config" value="&amp;`${INST_NAME}`_config" />
      <Member name="num_channels" value="`${dirSampNum + muxSampNum}`U" />
    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME}`_csg$idx_hal_obj" type="cyhal_resource_inst_t" const="true" public="true" include="`${sliceUsed$idx}`" guard="defined (CY_USING_HAL) || defined(CY_USING_HAL_LITE)" repeatCount="5" >
      <Member name="type" value="CYHAL_RSC_CSG" />
      <Member name="block_num" value="0U" />
      <Member name="channel_num" value="$idxU" />
    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME}`_csg$idx_hal_config" type="cyhal_comp_configurator_t" const="`${inFlash}`" public="true" include="`${sliceUsed$idx}`" guard="defined (CY_USING_HAL) || defined(CY_USING_HAL_LITE)" repeatCount="5" >
      <Member name="resource" value="&amp;`${INST_NAME}`_csg$idx_hal_obj" />
      <Member name="hppass_config" value="&amp;`${INST_NAME . &quot;_config&quot;}`" />
    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME}`_csg$idx_hal_config" type="mtb_hal_comp_configurator_t" const="`${inFlash}`" public="true" include="`${sliceUsed$idx}`" guard="defined (COMPONENT_MTB_HAL) &amp;&amp; (MTB_HAL_DRIVER_AVAILABLE_COMP)" repeatCount="5" >
      <Member name="resource_type" value="MTB_HAL_RSC_CSG" />
      <Member name="channel_num" value="$idxU" />
      <Member name="hppass_config" value="&amp;`${INST_NAME . &quot;_config&quot;}`" />
    </ConfigStruct>

    <ConfigFunction signature="__WEAK void __NO_RETURN `${INST_NAME}`_error(cy_rslt_t error)"
                    body="    (void)error; /* Suppress the compiler warning */&#xA;    while(true);" public="false" include="true" />

    <ConfigFunction signature="void `${INST_NAME}`_start(void)" public="true" include="true"
                    body="    if (!Cy_HPPASS_AC_IsBlockReady())&#xA;    {&#xA;        cy_rslt_t hppassStatus = (cy_rslt_t)Cy_HPPASS_AC_Start(0U, 1000U);&#xA;        if (CY_RSLT_SUCCESS != hppassStatus)&#xA;        {&#xA;            `${INST_NAME}`_error(hppassStatus);&#xA;        }&#xA;
   `${((bufUsed0 ? getExposedMember(bufRsc0, &quot;cb&quot;) : false) ||
       (bufUsed1 ? getExposedMember(bufRsc1, &quot;cb&quot;) : false) ||
       (bufUsed2 ? getExposedMember(bufRsc2, &quot;cb&quot;) : false) ||
       (bufUsed3 ? getExposedMember(bufRsc3, &quot;cb&quot;) : false)) ? &quot;    Cy_HPPASS_FIFO_SetInterruptMask(&quot; . INST_NAME . &quot;_FIFO_INTR);&#xA;    &quot; : &quot;&quot;}`}" />

    <ConfigInstruction value="cy_rslt_t hppassStatus = 0UL;" include="`${init}`" purpose="INITIALIZE" />
    <ConfigInstruction value="hppassStatus = Cy_HPPASS_Init(&amp;`${INST_NAME}`_config);" include="`${init}`" purpose="INITIALIZE" />
    <ConfigInstruction value="if (CY_RSLT_SUCCESS != hppassStatus)" include="`${init}`" purpose="INITIALIZE" />
    <ConfigInstruction value="{" include="`${init}`" purpose="INITIALIZE" />
    <ConfigInstruction value="    `${INST_NAME}`_error(hppassStatus);" include="`${init}`" purpose="INITIALIZE" />
    <ConfigInstruction value="}" include="`${init}`" purpose="INITIALIZE" />

    <ConfigInstruction value="hppassStatus = `${INST_NAME}`_fifo_isr_init();" purpose="INITIALIZE"
                       include="`${init &amp;&amp; ((bufUsed0 ? getExposedMember(bufRsc0, &quot;cb&quot;) : false) ||
                                                    (bufUsed1 ? getExposedMember(bufRsc1, &quot;cb&quot;) : false) ||
                                                    (bufUsed2 ? getExposedMember(bufRsc2, &quot;cb&quot;) : false) ||
                                                    (bufUsed3 ? getExposedMember(bufRsc3, &quot;cb&quot;) : false))}`" />
    <ConfigInstruction value="if (CY_RSLT_SUCCESS != hppassStatus)" purpose="INITIALIZE"
                       include="`${init &amp;&amp; ((bufUsed0 ? getExposedMember(bufRsc0, &quot;cb&quot;) : false) ||
                                                    (bufUsed1 ? getExposedMember(bufRsc1, &quot;cb&quot;) : false) ||
                                                    (bufUsed2 ? getExposedMember(bufRsc2, &quot;cb&quot;) : false) ||
                                                    (bufUsed3 ? getExposedMember(bufRsc3, &quot;cb&quot;) : false))}`" />
    <ConfigInstruction value="{" purpose="INITIALIZE"
                       include="`${init &amp;&amp; ((bufUsed0 ? getExposedMember(bufRsc0, &quot;cb&quot;) : false) ||
                                                    (bufUsed1 ? getExposedMember(bufRsc1, &quot;cb&quot;) : false) ||
                                                    (bufUsed2 ? getExposedMember(bufRsc2, &quot;cb&quot;) : false) ||
                                                    (bufUsed3 ? getExposedMember(bufRsc3, &quot;cb&quot;) : false))}`" />
    <ConfigInstruction value="    `${INST_NAME}`_error(hppassStatus);" purpose="INITIALIZE"
                       include="`${init &amp;&amp; ((bufUsed0 ? getExposedMember(bufRsc0, &quot;cb&quot;) : false) ||
                                                    (bufUsed1 ? getExposedMember(bufRsc1, &quot;cb&quot;) : false) ||
                                                    (bufUsed2 ? getExposedMember(bufRsc2, &quot;cb&quot;) : false) ||
                                                    (bufUsed3 ? getExposedMember(bufRsc3, &quot;cb&quot;) : false))}`" />
    <ConfigInstruction value="}" purpose="INITIALIZE"
                       include="`${init &amp;&amp; ((bufUsed0 ? getExposedMember(bufRsc0, &quot;cb&quot;) : false) ||
                                                    (bufUsed1 ? getExposedMember(bufRsc1, &quot;cb&quot;) : false) ||
                                                    (bufUsed2 ? getExposedMember(bufRsc2, &quot;cb&quot;) : false) ||
                                                    (bufUsed3 ? getExposedMember(bufRsc3, &quot;cb&quot;) : false))}`" />

    <ConfigInstruction value="hppassStatus = (cy_rslt_t)Cy_HPPASS_AC_Start(0U, 1000U);" include="`${start}`" purpose="INITIALIZE" />
    <ConfigInstruction value="if (CY_RSLT_SUCCESS != hppassStatus)" include="`${start}`" purpose="INITIALIZE" />
    <ConfigInstruction value="{" include="`${start}`" purpose="INITIALIZE" />
    <ConfigInstruction value="    `${INST_NAME}`_error(hppassStatus);" include="`${start}`" purpose="INITIALIZE" />
    <ConfigInstruction value="}" include="`${start}`" purpose="INITIALIZE" />
    <ConfigInstruction value="Cy_HPPASS_FIFO_SetInterruptMask(CYCFG_HPPASS_FIFO_INTR);" purpose="INITIALIZE"
                       include="`${start &amp;&amp; ((bufUsed0 ? getExposedMember(bufRsc0, &quot;cb&quot;) : false) ||
                                                     (bufUsed1 ? getExposedMember(bufRsc1, &quot;cb&quot;) : false) ||
                                                     (bufUsed2 ? getExposedMember(bufRsc2, &quot;cb&quot;) : false) ||
                                                     (bufUsed3 ? getExposedMember(bufRsc3, &quot;cb&quot;) : false))}`" />
  </ConfigFirmware>
</PersonalityTemplate>

